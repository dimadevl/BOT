import asyncio
import html
import os
from aiogram import Bot, Dispatcher, types, F

from os import getenv

from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())





from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from keyboards.reply import *
from keyboards.inline import *
from database.db_utils import *
from aiogram.types import CallbackQuery , FSInputFile, InputMediaPhoto
from utils.caption import *
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.formatting import  as_marked_section, Bold , as_list
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime ,timedelta
from utils.apsched import akcii, text_and
from utils import apsched
from utils.caption import matem_product_in_carts
from aiogram.enums import ParseMode
from fsm import admin_router
from contact import contact_router
from contact import menu_proces
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
load_dotenv()
TOKEN = os.getenv('TOKEN')
bot = Bot(os.getenv('TOKEN') , default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
MANAGER=os.getenv("MANAGER")











@dp.message(CommandStart())
async def command_start(message:Message):
    await message.answer(f'<b>!! –ú–∏ —Ä–∞–¥–∏ –≤–∞—Å –±–∞—á–∏—Ç–∏ üòé {message.from_user.full_name} !!</b>\n üòÉ <b>!!!</b>–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç –∑ –¥–æ—Å—Ç–∞–≤–∫–∏ Dikiy_Kaban<b>!!!</b> üòÉ\n            <b>üç∫üç∫üç∫–°–Ω–µ–∫—ñ–≤üç∫üç∫üç∫</b>\n                <b>üêó–î–∏–∫–∏–π –∫–∞–±–∞–Ωüêó</b>')
    await register_user(message)
    
async def register_user(message:Message):
    """–ü–µ—Ä–≤–∏—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å—å –∏–º—è –∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏ –≤ –±–∞–∑—É"""
    chat_id = message.chat.id
    full_name = message.from_user.full_name
    if db_register_user(full_name, chat_id):
        await message.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ')
        
        await menu_proces(message)
    else:
        await bot.send_message(chat_id=chat_id, text='–£ –Ω–∞—Å –Ω–µ –º–∞—î –≤–∞—à–æ–≥–æ –Ω–æ–º–µ—Ä–∞ü§´', reply_markup=share_phone_batton())
    










        

        
        # TODO        


@dp.message(F.text == 'üêó –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üêó')
async def order_by(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é"""
    chat_id = message.chat.id
    
    await bot.send_message(chat_id=chat_id, text='–ø–æ—ó—Ö–∞–ª–∏', reply_markup=back_to_manu())
    await bot.send_message(chat_id=chat_id, text='–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é', reply_markup=generator_category_manu(chat_id))

@dp.message(F.text.regexp(r'^–ì[–∞-—è]+ [–∞-—è]{4}'))
async def return_to_main_manu(message:types.Message):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id -1)
    
    await menu_proces(message)
    
    
@dp.callback_query(F.data.regexp(r'category_[1-9]'))
async def shov_product_batton(callback:CallbackQuery):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    category_id = int(callback.data.split('_')[-1])
    await bot.edit_message_text(text='–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç', chat_id=chat_id, message_id=message_id, reply_markup=product_by_categoria(category_id))
    

@dp.callback_query(F.data.contains('product_'))
async def shov_product_detale(callback:CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    product_id = int(callback.data.split('_')[-1])
    product = db_product_by_id(product_id)
    await bot.delete_message(chat_id=chat_id, 
                             message_id=message_id)
    if user_cart := db_get_user_cart(chat_id):
        
        db_update_carts(price=product.price, cart_id=user_cart.id)
        
        text = text_or_caption(product.product_name, product.description, product.price)
        
        
        await bot.send_message(chat_id=chat_id, text='–ó—Ä–æ–±—ñ—Ç—å –≤–∏–±—ñ—Ä –º–æ–¥–µ—Ñ—ñ–∫–∞—Ç–æ—Ä—É', reply_markup=back_batton())
        await bot.send_photo(chat_id=chat_id, photo=product.image, caption=text, reply_markup=constructor_plus_minus())
        
    else:
        await bot.send_message(chat_id=chat_id, text = '–ù–µ–º–∞—î –≤–∞—à–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É', reply_markup=share_phone_batton() )
        
        
        
          
          
          
          


@dp.message(F.text == '–ù–∞–∑–∞–¥‚óÄÔ∏è')
async def return_to_product_menu(message: Message):
    await bot.delete_message(message.chat.id, message.message_id-1)
    
    await order_by(message)
        


@dp.callback_query(F.data == 'return_to_categor')
async def return_tocategory_batton(callback:CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
    chat_id = callback.from_user.id
    message_id = callback.message.message_id
    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–ó—Ä–æ–±—ñ—Ç—å –≤–∏–±—ñ—Ä', reply_markup=generator_category_manu(chat_id))

@dp.callback_query(F.data.regexp(r'action [+-]'))
async def constructor_change(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–∞ –ø–ª—é—Å –∏ –º–∏–Ω—É—Å –≤–æ –≤—Ä–µ–º–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–µ"""
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    action = callback.data.split()[-1]
    product_name = callback.message.caption.split('\n')[0]
    product = db_get_product_by_name(product_name)
    product_price = product.price
    user_cart = db_get_user_cart(chat_id)
    if action == '+':
            user_cart.total_products +=1
            product_price = product_price*user_cart.total_products
            db_update_carts(price=product_price, quantity=user_cart.total_products,
                            cart_id=user_cart.id) 
    if action == '-':   
            if user_cart.total_products < 2:
                await callback.answer('–ú–µ–Ω—å—à–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–µ –º–æ–∂–Ω–∞', show_alert=True)
            else:    
                user_cart.total_products -=1
                product_price = product_price*user_cart.total_products
                db_update_carts(price=product_price, quantity=user_cart.total_products,
                            cart_id=user_cart.id) 
            
    text = text_or_caption(product.product_name, 
                           product.description, 
                           product_price)
    image = InputMediaPhoto(media=product.image, caption=text)
    
    try:
        await bot.edit_message_media(chat_id=chat_id, message_id=message_id, 
                                     media=image, reply_markup=constructor_plus_minus(user_cart.total_products))
    except TelegramBadRequest:
        pass
       
 
            
            
    
@dp.callback_query(F.data == 'put_ipnto_cart_')
async def put_into_cart(callback: CallbackQuery):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ª–æ–∂–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–∫—É"""
    chat_id = callback.from_user.id
    product_name = callback.message.caption.split('\n')[0]
    cart = db_get_user_cart(chat_id)
    
    
    await bot.delete_message(chat_id=chat_id, message_id=callback.message.message_id)
    
    if db_inser_or_update_finally_cart(cart_id=cart.id, product_name=product_name, total_products=cart.total_products, total_price=cart.total_price):
        await bot.send_message(chat_id=chat_id, text='–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω‚ù§Ô∏è')
    else:
        await bot.send_message(chat_id=chat_id, text='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–∞‚úçÔ∏è')
        
        
        
    await order_by(callback.message)



@dp.callback_query(F.data == '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∫–∞')
async def shov_finally_cart(callback: CallbackQuery):
    message_id = callback.message.message_id
    chat_id = callback.from_user.id
    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    context = matem_product_in_carts(chat_id, user_text='üí≤üí≤üí≤üí≤   –í–∞—à –∫–æ—à–∏–∫   üí≤üí≤üí≤üí≤')
    if context:
        count, text, *_ = context
        await bot.send_message(chat_id=chat_id, text=text, reply_markup=generate_delete_product(chat_id))
    else:
        await bot.send_message(chat_id=chat_id, text='–ö–æ—à–∏–∫ –ø—É—Å—Ç–∏–π ‚òπÔ∏è')
        await order_by(callback.message)


@dp.callback_query(F.data.contains('delete_'))
async def order_manager(callback: CallbackQuery):
    finally_id = callback.data.split('_')[-1]
    db_product_delate_by_id(finally_id=finally_id)
    await bot.answer_callback_query(callback_query_id=callback.id, text='–ü—Ä–æ–¥—É–∫—Ç –≤–∏–¥–∞–ª–µ–Ω', show_alert=True)
    
    await shov_finally_cart(callback)






@dp.callback_query(F.data.contains('order'))
async def order_manager(callback:CallbackQuery):
    chat_id = callback.from_user.id
    message_id = callback.message.message_id
    await bot.delete_message(chat_id=chat_id, message_id=message_id)
    caunt, text, total_price, cart_id = context = matem_product_in_carts(chat_id, user_text='–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è')
    user = db_get_user_info(chat_id=chat_id)
    text += f'–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞ {user.name}\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä {user.phone} '
    
    await bot.send_message(chat_id=MANAGER, text=text )
    await bot.send_message(chat_id=chat_id, text="–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∑–≤'—è–∑–æ–∫ üì± –∑ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º - –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ —Ä–æ–±–æ—Ç—ñüòéüêó")
    
    telegram_id = callback.from_user.id
    db_update_history(text , telegram_id)
    
    db_clear_finally_cart(cart_id=cart_id)  
    sheduler = AsyncIOScheduler(timezone="Europe/Kiev")
    sheduler.add_job(apsched.text_order, trigger='date', run_date=datetime.now() + timedelta(seconds=5), kwargs={'bot':bot,  'message':callback.message, } )
    sheduler.start()
    
    
    sheduler = AsyncIOScheduler(timezone="Europe/Kiev")
    sheduler.add_job(apsched.akcii, trigger='date', run_date=datetime.now() + timedelta(seconds=10), kwargs={'bot':bot,  'message':callback.message, } )
    sheduler.start()
    
    sheduler = AsyncIOScheduler(timezone="Europe/Kiev")
    sheduler.add_job(apsched.text_and, trigger='date', run_date=datetime.now() + timedelta(seconds=15), kwargs={'bot':bot,  'message':callback.message, } )
    sheduler.start()
    
    
    
    
    


@dp.message(F.text == '–ö–æ—à–∏–∫ üõí')
async def back_to_cart(message: types.Message):
    chat_id = message.chat.id
    await bot.send_message(chat_id=chat_id, text='üòÉ', reply_markup=menu_cart_reply(chat_id=chat_id))
    await bot.send_message(chat_id=chat_id, text='–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ—à–∏–∫ —á–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—éü•ô', reply_markup=back_to_manu())
    

@dp.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç–∏ üì±')
async def info_handler(message: types.Message):
    chat_id = message.chat.id
    text = as_list(as_marked_section(Bold('–ö–æ–Ω—Ç–∞–∫—Ç–∏:'), '–ú–µ–Ω–µ–¥–∂–µ—Ä: @Ulia22000', marker='üìû'),as_marked_section(Bold('–î–æ—Å—Ç–∞–≤–∫–∞:'), "–ù–æ–≤–∞ –ø–æ—à—Ç–∞ üöí, –ö—É—Ä'—î—Ä–æ–º üõµ"),
                   as_marked_section(Bold('–ù–∞—à —á–∞—Å –ø—Ä–∞—Ü—ñ'), '9.00 = 20.00', marker='‚è≤Ô∏è'), sep='\n------------------------------------------------\n')
    await bot.send_message(chat_id=chat_id, text =text.as_html())


@dp.message(F.text == '–ê–∫—Ü—ñ—ó üéâ')
async def akcii_handler(message: types.Message):
    chat_id = message.chat.id
    akcii = db_get_akcii()
    if akcii:
        for prod in akcii:
            text = as_list(as_marked_section(Bold(f'üéâ–ù–∞–∑–≤–∞ –∞–∫—Ü—ñ—ó:\n{prod.name}'), f'–û–ø–∏—Å –∞–∫—Ü—ñ—ó:\n{prod.descriptions}', marker='üéÅ'), as_marked_section(Bold('‚ú®–ù–∞—Å—Ç—É–ø–Ω–∞ –∞–∫—Ü—ñ—è –∫–æ–∂–Ω–∏–π –º—ñ—Å—è—Ü—å –∑ –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—è—Ü—èüòÉ'),'–ê –¥–∞–ª—ñ —â–µ —Ü—ñ–∫–∞–≤—ñ—à–µ –∑\n           üêó–¢–î.–î–∏–∫–∏–π –ö–∞–±–∞–Ωüêó', marker='üéà'), sep='\n‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\n')
            await bot.send_photo(chat_id = chat_id, photo=prod.images, caption=text.as_html(), reply_markup=back_to_manu())
    else:
        await bot.send_message(chat_id=chat_id, text='–ù–∞ –¥–Ω–Ω–∏–π —á–∞—Å –∞–∫—Ü—ñ—ó –Ω–µ–º–∞—îü§´')
        
@dp.message(F.text == '–Ü—Å—Ç–æ—Ä—ñ—è üìì')
async def history_handler(message:types.Message):
    chat_id= message.from_user.id
    carts = db_get_historys(chat_id)
    if carts:
        for cart in carts:
            text = f'–í–∞—à–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {cart.created} {cart.text} –ø–æ –≤–∞—à–æ–º—É –∞–π–¥—ñ {cart.telegram_id}'
            await bot.send_message(chat_id=chat_id, text =text)
    else:
        await bot.send_message(chat_id=chat_id, text='–í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –ø—É—Å—Ç–∞')
















@dp.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞—Ä—Ç—É')
async def start_bot(message:types.Message):
    await command_start(message)

@dp.message(F.text == '–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ üÖ∞Ô∏è')
async def assortiment(message:types.Message):
    chat_id = message.chat.id
    product = db_get_assorti()
    if product:
        for prod in product:
            product_id = prod.id
            text = f'{prod.description}'
            await bot.send_photo(chat_id=chat_id, photo =prod.image, caption=text, reply_markup=assorti_product(product_id))
        


@dp.callback_query(F.data.contains('delassorti_'))
async def delete_assorti(callback:CallbackQuery):
    chat_id = callback.message.chat.id
    product_id = callback.data.split('_')[-1]
    db_delete_assorti(product_id)
    await bot.send_message(chat_id=chat_id, text='–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω')
    await callback.answer()



















   
dp.include_router(admin_router)   
dp.include_router(contact_router)
   
   
   
   
   
    
    

async def main():
    
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    
    
    
    
    
    
    
    
    
    
    
    
    
if __name__ == '__main__':
    asyncio.run(main())