from aiogram import Router, types, Bot, Dispatcher, F
from aiogram.filters import Command
from keyboards.reply import generator_keyboard_reply, fsm_catalog
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.db_utils import db_session, db_get_akcii, db_delete_akcii
from database.models import Akcii, Categories, Products
from keyboards.inline import delete_batton_akcii
from database.db_utils import db_update_users, db_create_user_cart




admin_router = Router()




class AddProduct(StatesGroup):
    name = State()
    descriptions = State()
    images = State()

class AddTovar(StatesGroup):
    category_id = State()
    product_name= State()
    price = State()
    description = State()
    image = State()



ADMIN_KB = generator_keyboard_reply(
    '–ö–∞—Ç–∞–ª–æ–≥',
    '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∞–∫—Ü–∏–∏',
    '–¢–µ–∫—É—â–∞—è –∞–∫—Ü–∏—è',
    '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å—Ç–∞—Ä—Ç—É',
     placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
     sizes=(2, 1, 2)
)

CATALOG_KB = fsm_catalog()


@admin_router.message(Command('YUL', prefix='@'))
async def comanda_admina(message:types.Message):
    await message.answer('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å', reply_markup=ADMIN_KB)





    
@admin_router.message(StateFilter(None),F.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∞–∫—Ü–∏–∏')
async def add_product(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddProduct.name)
    
@admin_router.message(StateFilter('*'), Command('–û—Ç–º–µ–Ω–∞'))
@admin_router.message(StateFilter('*'), F.text.casefold() == '–æ—Ç–º–µ–Ω–∞')
async def back_state(message:types.Message, state:FSMContext):
    curent_state = state.get_state()
    if curent_state is None:
        return
    await state.clear()
    await message.answer('–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã', reply_markup=CATALOG_KB)
    
    
    
    
@admin_router.message(AddProduct.name, F.text)
async def add_name(message: types.Message, state:FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏")
    await state.set_state(AddProduct.descriptions)
    
@admin_router.message(AddProduct.descriptions, F.text)
async def add_descrip(message: types.Message, state: FSMContext):
    await state.update_data(descriptions=message.text)
    await message.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ")
    await state.set_state(AddProduct.images)
    
@admin_router.message(AddProduct.images, F.photo)
async def add_image(message: types.Message, state:FSMContext):
    await state.update_data(images=message.photo[-1].file_id)
    await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=ADMIN_KB)
    data = await state.get_data()
    db_session.add(Akcii(
        name = data["name"],
        descriptions = data["descriptions"],
        images = data["images"],))
    
    db_session.commit()
    await state.clear()
    
@admin_router.message(F.text == '–¢–µ–∫—É—â–∞—è –∞–∫—Ü–∏—è')
async def delete_tovar_in_akcii(message:types.Message, bot:Bot):
    chat_id = message.chat.id
    prod = db_get_akcii()
    for i in prod:
        text = f'{i.name}, {i.descriptions}'
        await bot.send_photo(chat_id=chat_id, photo=i.images, caption=text, reply_markup=delete_batton_akcii())
        
@admin_router.callback_query(F.data.contains('deletes_'))
async def delate_akcion(callback:types.CallbackQuery, bot:Bot):
    chat_id = callback.from_user.id
    akcii_id = callback.data.split('_')[-1]
    db_delete_akcii(akcii_id)
    await bot.send_message(chat_id=chat_id, text='–ê–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω–∞')
    await callback.answer()

@admin_router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog_get(message:types.Message, bot:Bot):
    chat_id = message.chat.id
    await bot.send_message(chat_id = chat_id, text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞', reply_markup=CATALOG_KB)
    
    
@admin_router.message(StateFilter(None), F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Çü•©')
async def add_product_catalog(message:types.Message, state:FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É 1.–ß–∏–ø—Å–∏ –ú'—è—Å–Ω—ñ, 2.–ö–æ–≤–±–∞—Å–∫–∏, 3.–ö–æ–≤–±–∞—Å–∏, 4.–ú–∞—Å–∏–∫–∏", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddTovar.category_id)
    
@admin_router.message(AddTovar.category_id, F.text)
async def add_categori_id(message:types.Message, state:FSMContext):
    try:
        float(message.text)
        await state.update_data(category_id = message.text)
    except ValueError:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã')
        return
    await state.update_data(category_id = message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞')
    await state.set_state(AddTovar.product_name)

@admin_router.message(AddTovar.product_name, F.text)
async def add_name_catalog(message:types.Message, state:FSMContext):
    await state.update_data(product_name= message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞')
    await state.set_state(AddTovar.price)
    
@admin_router.message(AddTovar.price, F.text)
async def add_price_catalog(message:types.Message, state:FSMContext):
    try:
        float(message.text)
        await state.update_data(price=message.text)
    except ValueError:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        return    
    
    await state.update_data(price=message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç')
    await state.set_state(AddTovar.description)
    
@admin_router.message(AddTovar.description, F.text)
async def add_descr_catalog(message:types.Message, state:FSMContext):
    await state.update_data(description=message.text)
    await message.answer('–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ')
    await state.set_state(AddTovar.image)
    
@admin_router.message(AddTovar.image, F.photo)
async def add_image_catalog(message:types.Message, state:FSMContext):
    await state.update_data(image=message.photo[-1].file_id)
    await message.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=ADMIN_KB)
    data = await state.get_data()
    db_session.add(Products(category_id=data["category_id"],
                            product_name= data ["product_name"],
                            price = data ["price"],
                            description = data ["description"],
                            image = data["image"]))
    db_session.commit()
    await state.clear()

@admin_router.message(F.text == '–ù–∞–∑–∞–¥ ‚è™')
async def back_admin(message:types.Message):
    await comanda_admina(message)
    
